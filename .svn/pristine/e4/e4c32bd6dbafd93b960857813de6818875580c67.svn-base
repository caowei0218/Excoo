package com.eoe.excoo.webservice;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import android.os.AsyncTask;
import android.view.View;

import com.eoe.excoo.activity.ShowActivity;
import com.eoe.excoo.bean.ItemBean;
import com.eoe.excoo.bean.PicBean;
import com.eoe.excoo.bean.TypeBean;
import com.eoe.excoo.util.Common;
import com.eoe.excoo.util.JsonBinder;

/**
 * 获得物品
 * */
public class GetArticleWebservice extends AsyncTask<String, Integer, String> {
	private JsonBinder jsonBinder = JsonBinder.buildNonDefaultBinder();
	// 调用的方法名
	public final String MehtodName = "getItemList";
	List<ItemBean> lists = new ArrayList<ItemBean>();
	// private ArticleBean articleBean;
	private HttpTransportSE ht = null;
	private SoapSerializationEnvelope envelope;
	private SoapObject send = null;
	private ShowActivity showActivity = null;
	private boolean boo = false;

	public GetArticleWebservice(ShowActivity showActivity, boolean boo) {
		this.showActivity = showActivity;
		this.boo = boo;
	}

	protected void onPreExecute() {
		super.onPreExecute();
		showActivity.beginWaitDialog("正在获取物品", boo);
		ht = new HttpTransportSE(WebserviceUtils.HTTPTRANSPORTSE);
		ht.debug = false;
		envelope = new SoapSerializationEnvelope(SoapEnvelope.VER10);
		send = new SoapObject(WebserviceUtils.NAMESPACE, MehtodName);
		send.addProperty("uid", Common.userCommon.getUser_id());//
		envelope.bodyOut = send;
		envelope.dotNet = false;
	}

	protected String doInBackground(String... params) {
		String returnStr = null;
		try {
			ht.call(WebserviceUtils.NAMESPACE + "/" + MehtodName, envelope);
		} catch (Exception e) {
			e.printStackTrace();
			returnStr = "连接失败，请检查网络连接";
			return returnStr;
		}

		try {
			Object result = (Object) envelope.getResponse();
			returnStr = result.toString();
			if (returnStr.equals("anyType{}")) {
				ItemBean Item = new ItemBean();
				showActivity.itemBeans.add(Item);
				TypeBean type = new TypeBean();
				showActivity.typeBeans.add(type);
				return returnStr;
			} else {
				String[] items = returnStr.split("#");
				lists = new ArrayList<ItemBean>();
				List<TypeBean> typeBeans = new ArrayList<TypeBean>();
				for (int i = 0; i < items.length; i++) {
					String[] item = items[i].split("-");
					ItemBean itemBean = jsonBinder.fromJson(item[0],
							ItemBean.class);
					TypeBean typeBean = jsonBinder.fromJson(item[1],
							TypeBean.class);
					List<PicBean> pics = jsonBinder.stringToList(item[2],
							PicBean.class);
					List<PicBean> sets = new ArrayList<PicBean>(pics);
					itemBean.setPicBeans(sets);
					itemBean.setType(typeBean);
					typeBeans.add(typeBean);
					lists.add(itemBean);
				}
				showActivity.itemBeans = lists;

				for (int i = 0; i < typeBeans.size() - 1; i++) {
					for (int j = typeBeans.size() - 1; j > i; j--) {
						if (typeBeans.get(j).getName()
								.equals(typeBeans.get(i).getName())) {
							typeBeans.remove(j);
						}
					}
				}
				showActivity.typeBeans = typeBeans;
			}

		} catch (SoapFault e) {
			e.printStackTrace();
		} catch (JsonParseException e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return returnStr;
	}

	protected void onPostExecute(String result) {
		super.onPostExecute(result);
		showActivity.endWaitDialog(boo);
		showActivity.getAllPics();
		if (lists.size() != 0) {
			showActivity.first_add.setVisibility(View.INVISIBLE);
			showActivity.picAdapter();
		} else {
			// 显示添加按钮
			showActivity.first_add.setVisibility(View.VISIBLE);
		}
		showActivity.onLoad();
	}
}
